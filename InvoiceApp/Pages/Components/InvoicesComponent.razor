@inject IRepositoryCollection repo
@inject NavigationManager nav
@inject AuthenticationStateProvider authState

@* Invoices component *@
<div class="text-danger">@Message</div>
<label class="text-dark m-1">Customer:</label>

@* Usage of Radzen *@
<RadzenDropDown @bind-Value=@dropdownValue Data=@customers TextProperty="Name" ValueProperty="Id" Style="width: 100%; max-width: 400px;" />
<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4 " Text="Add New Invoice" Click="@AddInvoice" />
<RadzenDataGrid @ref="invoiceGrid" AllowAlternatingRows="false" AllowSorting="true" AllowFiltering="true" FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                Data="@invoices" TItem="InvoiceDTO" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn TItem="InvoiceDTO" Property="InvoiceNumber" Title="Invoice Number" Filterable="false" Width="120px" />
        <RadzenDataGridColumn TItem="InvoiceDTO" FormatString="{0:MM/dd/yyyy}" Property="CreateDate" Title="Create Date" Width="120px" />
        <RadzenDataGridColumn TItem="InvoiceDTO" Property="Description" Title="Description" Width="120px" />
        <RadzenDataGridColumn TItem="InvoiceDTO" Property="CustomerName" Title="Customer Name" Type="typeof(IEnumerable<string>)" Width=" 120px"
                              FilterValue="@selectedCustomerNames" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
            <FilterTemplate>
                <RadzenDropDown @bind-Value=@selectedCustomerNames Style="width:100%;"
                                Change=@OnSelectedCustomerNameChange Data="@customerNames" AllowClear="true" Multiple="true" />
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="InvoiceDTO" Property="InvoiceTermsName" Title="Invoice Terms" Type="typeof(IEnumerable<string>)" Width="120px"
                              FilterValue="@selectedInvoiceTerms" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
            <FilterTemplate>
                <RadzenDropDown @bind-Value=@selectedInvoiceTerms Style="width:100%;"
                                Change=@OnSelectedInvoiceTermsChange Data="@invoiceTermsValues" AllowClear="true" Multiple="true" />
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="InvoiceDTO" Property="InvoiceTotal" Title="Invoice Total" Filterable="false" Width="120px">
            <Template Context="invoice">
                @string.Format("{0:c}",invoice.InvoiceTotal*(1+invoice.TaxRate/100))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="InvoiceDTO" Property="InvoiceTotal" Title="DUE" Filterable="false" Width="120px">
            <Template Context="invoice">
                @string.Format("{0:c}",invoice.InvoiceTotal*(1+invoice.TaxRate/100) - invoice.Paid - invoice.Credit)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="InvoiceDTO" Property="Id" Title="" Width="120px" Filterable="false">
            <Template Context="invoice">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="description" class="m-1" Click=@(() => OpenInvoice(invoice.Id)) Text="Edit" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {

    List<InvoiceDTO> invoices = new();
    List<CustomerDTO> customers = new();
    List<InvoiceTermsDTO> invoiceTerms = new();
    RadzenDataGrid<InvoiceDTO>? invoiceGrid;

    string Message = string.Empty;
    string dropdownValue = string.Empty;

    IEnumerable<string>? selectedCustomerNames;
    List<string> customerNames = new List<string>();
    void OnSelectedCustomerNameChange(object value)
    {
        if (selectedCustomerNames != null && !selectedCustomerNames.Any())
        {
            selectedCustomerNames = null;
        }
    }

    IEnumerable<string>? selectedInvoiceTerms;
    List<string> invoiceTermsValues = new List<string>();
    void OnSelectedInvoiceTermsChange(object value)
    {
        if (selectedInvoiceTerms != null && !selectedInvoiceTerms.Any())
        {
            selectedInvoiceTerms = null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState auth = await authState.GetAuthenticationStateAsync();

        await repo.Customer.Seed(auth.User);
        await repo.InvoiceTerms.Seed(auth.User);
        await repo.Save();

        customers = await repo.Customer.GetAllEntities(auth.User);
        foreach (CustomerDTO c in customers)
            customerNames.Add(c.Name!);

        invoiceTerms = await repo.InvoiceTerms.GetAllEntities(auth.User);
        foreach (InvoiceTermsDTO i in invoiceTerms)
            invoiceTermsValues.Add(i.Name);

        if (customers.Count > 0)
            dropdownValue = customers[0].Id;
        invoices = await repo.Invoice.GetAll(auth.User);
    }

    public void OpenInvoice(string Id)
    {
        nav.NavigateTo("/InvoiceDetails/" + Id);
    }

    public async Task AddInvoice()
    {
        AuthenticationState auth = await authState.GetAuthenticationStateAsync();

        // Create an invoice and redirect to it.
        List<InvoiceTermsDTO> terms = await repo.InvoiceTerms.GetAllEntities(auth.User);
        string id = await repo.Invoice.AddEntity(auth.User, new InvoiceDTO
            {
                Description = "New Invoice",
                CreateDate = DateTime.Now,
                Credit = 0,
                Paid = 0,
                CustomerId = dropdownValue,
                TaxRate = 0,
                InvoiceTermsId = terms[0].Id
            });
        await repo.Save();
        nav.NavigateTo("/InvoiceDetails/" + id);
    }
}

